@model List<FriendRequest>
<style>
    #friendList {
        border-radius: 50px;
        background-color: whitesmoke;
    }

    .friendListUnit {
        border-radius: 1rem;
        margin: 2rem;
    }

        .friendListUnit > * {
            margin: 0.5rem;
        }
</style>

<div id="friendList">
    @if (Model.Count() == 0)
    {
        <p>尚無邀請</p>
    }
    @foreach (var item in Model)
    {
        <div class="friendListUnit">
            <p>序列號:@item.uuid</p>
            @switch (item.Status)
            {
                case 1:
                    <p>已接受</p>
                    break;
                case 0:
                    <p>已送出</p>
                    break;
                case -1:
                    <p>已拒絕</p>
                    break;
                default:
                    <p>內部伺服器錯誤</p>
                    break;
            }
            <p>送出者:@item.SenderUserId</p>
            @*<p>受邀者:@item.ReceiverUserId</p>*@
            @if (item.Status == 0)
            {
                <button class="acceptFriendRequest">接受邀請</button>
            }
        </div>
    }
</div>
<script>
    // 批量對邀請列表的所有接受邀請按鈕添加事件監聽
    document.getElementById("friendRequestList").addEventListener("click", (e) => {
        if (e.target.classList.contains("acceptFriendRequest")) {
            fetch("/api/Friend", {
                method: "POST",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    UserId: parseInt(e.target.previousElementSibling.innerText.split(":")[1]),
                    FriendId: parseInt(e.target.previousElementSibling.previousElementSibling.innerText.split(":")[1]),
                    Status: true
                })
            }).then(res => {
                return res.json();
            }).then(ret => {
                e.target.innerText = ret.message;
            });
        }
    });
</script>