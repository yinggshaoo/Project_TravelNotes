@{
    ViewData["Title"] = "草稿編輯";
}
@model List<article>
@{
    #region 初始化
    List<string> cityNames = new List<string>()
    {
        "臺北市","新北市","桃園市","基隆市","宜蘭縣","新竹市","新竹縣","苗栗縣","臺中市","彰化縣","南投縣","雲林縣",
        "嘉義市","嘉義縣","臺南市","高雄市","屏東縣","臺東縣","花蓮縣","澎湖縣","金門縣","連江縣","其它"

    };
    List<Spots> spotTagList = ViewBag.spotTagList;
    article target = ViewBag.target;
    bool isPublish = target.ArticleState!.Trim() == "草稿" ? false : true;
    Spots targetSpot;
    string time;
    var tempTime = (DateTime)target!.TravelTime!;
    time = tempTime.ToString("yyyy-MM-ddTHH:mm");
    string content = target!.Contents!;
    if(target.SpotId == null)
    {
        targetSpot = null;
    }
    else
    {
        targetSpot = spotTagList.FirstOrDefault(a => a.SpotId == target.SpotId)!;
    }
    
    #endregion
}
<style>
    

    #notification {
        display: none;
        position: fixed;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
        background-color: var(--color2);
        color: var(--color4);
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        z-index: 1000;
    }


    .buttons {
        margin: 2px;
    }

    .articleLabel {
        color: black;
        font-weight:bold;
    }

    .articleInput {
        border-color: var(--color5);
    }

    .articleSelect {
        color: var(--color4);
        border-color: var(--color5);
    }

    #articleImage{
       width: 120px; 
       height: 120px; 
       cursor: pointer;
       border:3px solid black;
       border-radius:5px;
    }
    #articleImage:hover{
        background-color:rgba(0.9,0.9,0.9,0.2);
    }
    

    .custom-badge {
        background-color: rgb(236, 220, 126);
        color: #212529; /* 设置文本颜色 */
        padding: 5px 10px; /* 设置内边距 */
        border-radius: 0.25rem; /* 设置圆角 */
        margin:2px;
    }

    #currentSpotTag{
        margin:5px;
    }
    .col-auto{
        margin:2px
    }
    .btn{
        margin:1px;
    }
    .btn-tag{
        background-color:var(--color2);
        color:white;
    }
    .panel{
        background-color:var(--color1);
        width:fit-content;
        padding:2px;
        border-radius:5px;
        position: absolute;
        z-index: 100;
        display: none;
    }

/*     .otherTagPanel{
        right:0px;
    } */

    .tox .tox-edit-area__iframe {
        background-color: transparent;
    }

    .tox:not(.tox-tinymce-inline) .tox-editor-header {
        background-color: transparent;
    }
    .tox .tox-menubar{
        background-color: transparent;
    }
    .tox .tox-toolbar, .tox .tox-toolbar__overflow, .tox .tox-toolbar__primary{
        background-color: transparent;
    }
    .tox .tox-toolbar-overlord{
        background-color: transparent;
    }
    .tox .tox-tbtn--bespoke{
        background-color: transparent;
    }
    .tox-tinymce{
        border:1px solid black;
    }
    .tox .tox-statusbar{
        display:none;
    }

    #dropdown{
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        background-color: var(--color-yellow);
    }

</style>
<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
@* <script src="~/lib/_js/jquery-3.6.0.js"></script> *@
<script src="https://cdn.tiny.cloud/1/cx5w3vy6l6bg0senjow539pjj585n4wqopo9s4r3viuyx88c/tinymce/6/tinymce.min.js"
        referrerpolicy="origin"></script>

@* <h1> 當前ID:@target.ArticleId</h1> *@
<input type="text" id="articleId" value="@target.ArticleId" style="display:none;">
<div class="container">
    
    <div class="row justify-content-center ">
        <!-- 创建三个列（columns） -->
        <div class="col-sm-2">
            <div class="row align-items-start">
                @if (!isPublish)
                {
                    <select id="dropdown" class="form-select articleSelect">
                        @foreach (var article in Model)
                        {
                            var truncatedTitle = article.Title.Length > 10 ? article.Title.Substring(0, 12)+"..." : article.Title;

                            <option value="@article.ArticleId">@truncatedTitle</option>
                        }
                    </select>
                }
            </div>
            

        </div>
        <div class="col-sm-8 text-center">
            <div class="row align-items-center">
                <div class="col-auto">
                    <label for="title" class="articleLabel">標題:</label>
                </div>
                <div class="col">
                    <!-- 添加 .form-control 类 -->
                    <input type="text" id="title" value="@target.Title" class="form-control articleInput">
                </div>
            </div>
            <div class="row">
                <div class="col-auto">
                    <label for="subtitle" class="articleLabel">副標題:</label>
                </div>
                <div class="col">
                    <!-- 添加 .form-control 类 -->
                    <input type="text" id="subtitle" value="@target.Subtitle" class="form-control articleInput">
                </div>
            </div>
            <div class="row">
                <div class="col-auto">
                    <label for="travelTime" class="articleLabel">時間:</label>
                </div>
                <div class="col">
                    <!-- 添加 .form-control 类 -->
                    <input type="datetime-local" id="travelTime" value="@time" class="form-control articleInput">
                </div>
            </div>
        </div>
        <div class="col-sm-2">
            <img src="@target.Images" id="articleImage" />
            <input type="file" id="articleImageUpload" style="display:none;" />
            
        </div>
    </div>
</div>

<div class="container">
    <div class="row ">
        @for (int i = 0; i < cityNames.Count; i++)
        {
            <div class="col-auto">
                <button class="cityButton btn btn-secondary" onclick="refreshTag(@i)">@cityNames[i]</button>
                <div class="row">
                    <div class="spotPanel panel ">
                        <div>
                            <input type="text" id="spotTagInput_@i" oninput="refreshTag(@i)"></input>
                            <button onclick="addSpotTag(this)" class="btn btn-tag">新增</button>
                        </div>
                        <div id="spotTag_@i">
                        </div>
                    </div>
                </div>
                
            </div>
        }

    </div>
    <div class="row">
        <div class="col">
            <div>
                <span class="articleLabel">旅遊景點:</span>
                <span id="currentSpotTag">@(targetSpot == null ? "" : targetSpot.ScenicSpotName)</span>
            </div>
            <div>
                <div class="row">
                    <div class="col-auto articleLabel">文章標籤:</div>
                    <div class="col-auto" id="currentOtherTag">
                    </div>
                </div>

            </div>
        </div>
        <div class="col-auto">
            <div class="row justify-content-end">
                <div class="col-auto">
                    <button class="btn btn-secondary" id="otherTagButton">新增標籤</button>
                </div>        
            </div>
            <div class="row justify-content-end">
                <div class="otherTagPanel panel ">
                    <div>
                        <input type="text" id="otherTagInput" oninput="refreshOtherTag(this)"></input>
                        <button onclick="addOtherTag(this)" class="btn btn-tag">新增</button>
                    </div>
                    <div id="otherTags">
                    </div>
                </div>
            </div>
            
        </div>
    </div>

</div>


<div>
    <textarea id="tiny"></textarea>
</div>
<div>
    <button id="saveButton" class="btn btn-secondary buttons">儲存</button>
    @if (!isPublish)
    {
        <button id="createButton" class="btn btn-secondary buttons">新增</button>
        <button id="publishButton" class="btn btn-secondary buttons">發佈</button>
    }
    else
    {
        <a class="btn btn-secondary buttons" href="/Article/ArticleView?articleId=@target.ArticleId">到文章頁面</a>
    }
    <button id="deleteButton" class="btn btn-danger">删除</button>
    @*                 <button id="testButton" class="btn btn-danger">測試</button> *@
</div>


<div id="notification"></div>


<script>
    let isPublish = @Html.Raw(Json.Serialize(isPublish));
    let spotsData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.spotTagList));
    let TaipeiCity       = []
    let NewTaipeiCity    = [];
    let TaoyuanCity      = [];
    let KeelungCity      = [];
    let YilanCounty      = [];
    let HsinchuCity      = [];
    let HsinchuCounty    = [];
    let MiaoliCounty     = [];
    let TaichungCity     = [];
    let ChanghuaCounty   = [];
    let NantouCounty     = [];
    let YunlinCounty     = [];
    let ChiayiCity       = [];
    let ChiayiCounty     = [];
    let TainanCity       = [];
    let KaohsiungCity    = [];
    let PingtungCounty   = [];
    let TaitungCounty    = [];
    let HualienCounty    = [];
    let PenghuCounty     = [];
    let KinmenCounty     = [];
    let LienchiangCounty = [];
    let Other = [];
    let AllCity = [TaipeiCity, NewTaipeiCity, TaoyuanCity, KeelungCity, YilanCounty, HsinchuCity, HsinchuCounty,
        MiaoliCounty, TaichungCity, ChanghuaCounty, NantouCounty, YunlinCounty, ChiayiCity, ChiayiCounty,
        TainanCity, KaohsiungCity, PingtungCounty, TaitungCounty, HualienCounty, PenghuCounty, KinmenCounty,
        LienchiangCounty, Other];
    
    for (let i = 0; i < spotsData.length;i++) {
        if (spotsData[i].City == null) {
            continue;
        }
        if (spotsData[i].City.trim() === "臺北市") {
            TaipeiCity.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "新北市") {
            NewTaipeiCity.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "桃園市") {
            TaoyuanCity.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "基隆市") {
            KeelungCity.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "宜蘭縣") {
            YilanCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "新竹市") {
            HsinchuCity.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "新竹縣") {
            HsinchuCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "苗栗縣") {
            MiaoliCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "臺中市") {
            TaichungCity.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "彰化縣") {
            ChanghuaCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "南投縣") {
            NantouCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "雲林縣") {
            YunlinCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "嘉義市") {
            ChiayiCity.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "嘉義縣") {
            ChiayiCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "臺南市") {
            TainanCity.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "高雄市") {
            KaohsiungCity.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "屏東縣") {
            PingtungCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "臺東縣") {
            TaitungCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "花蓮縣") {
            HualienCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "澎湖縣") {
            PenghuCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "金門縣") {
            KinmenCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "連江縣") {
            LienchiangCounty.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
        else if (spotsData[i].City.trim() == "其它") {
            Other.push({
                SpotId: spotsData[i].SpotId,
                ScenicSpotName: spotsData[i].ScenicSpotName
            });
        }
    }   
        // console.log(AllCity); 
    let currentSpotTag = {
        SpotId:0,
        ScenicSpotName:""
    };
    let currentCity = ""
    let tempSpot = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(targetSpot));
    if(tempSpot != null){
        currentSpotTag.SpotId = tempSpot.SpotId;
        currentSpotTag.ScenicSpotName = tempSpot.ScenicSpotName;
        currentCity = tempSpot.City;
    }
    let otherTagsData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.otherTagList));
    
    let tempOtherTags = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.currentOtherTags));
    let currentOtherTags = [];
    for (let i = 0; i < tempOtherTags.length; i++) {
        let ot = {
            OtherTagId: tempOtherTags[i].OtherTagId,
            OtherTagName: tempOtherTags[i].OtherTagName
        }
        currentOtherTags.push(ot);
    }
    
    let backendData = @Html.Raw(Json.Serialize(content));
    $(function () {
        refreshOtherTag(document.getElementById("otherTagInput"));
        updateCurrentOtherTags();
        initLabel();
        let dropdown = $("#dropdown");
        let articleId = $('#articleId').val();
        const image_upload_handler = (blobInfo, progress) => new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.withCredentials = false;
            xhr.open('POST', '/Article/UploadImage');

            xhr.upload.onprogress = (e) => {
                progress(e.loaded / e.total * 100);
            };

            xhr.onload = () => {
                if (xhr.status === 403) {
                    reject({ message: 'HTTP Error: ' + xhr.status, remove: true });
                    return;
                }

                if (xhr.status < 200 || xhr.status >= 300) {
                    reject('HTTP Error: ' + xhr.status);
                    return;
                }

                const json = JSON.parse(xhr.responseText);

                if (!json || typeof json.location != 'string') {
                    reject('Invalid JSON: ' + xhr.responseText);
                    return;
                }

                resolve(json.location);
            };

            xhr.onerror = () => {
                reject('Image upload failed due to a XHR Transport error. Code: ' + xhr.status);
            };

            const formData = new FormData();
            formData.append('file', blobInfo.blob());
            formData.append('articleId', articleId);

            xhr.send(formData);
        });
        tinymce.init({
            selector: '#tiny',
            plugins: 'image',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | image | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight ',
            automatic_uploads: true,
            images_upload_handler: image_upload_handler,
            file_picker_types: 'image',
            init_instance_callback: function (editor) {
                if (backendData == null) {
                    editor.setContent("");
                }
                else {
                    editor.setContent(backendData);
                }
            },
            content_css: "/css/tiny.css"
        });
        for (let i = 0; i < dropdown.children().length; i++) {
            if (dropdown.children()[i].value == articleId) {
                dropdown.val(dropdown.children()[i].value);
                break;
            }
        }


        
        function save() { 
            if (isPublish) {
                if (!publishCheck()) {
                    return;
                }
            }
            var contentImages = [];
            var editorContent = tinymce.get('tiny').getContent();
            editorContent = editorContent.replace(/src="img/g, 'src="/img');
            var tempElement = $('<div>').html(editorContent);
            tempElement.find('img').each(function () {
                var src = $(this).attr('src');
                contentImages.push(src.substring(src.lastIndexOf('/') + 1));
            });
            let articleData = {
                articleId: articleId,
                title: $('#title').val(),
                subtitle: $('#subtitle').val(),
                travelTime: $('#travelTime').val(),
                content: editorContent,
                contentImages: JSON.stringify(contentImages),
                SpotId: currentSpotTag.SpotId,
                ScenicSpotName: currentSpotTag.ScenicSpotName,
                City: currentCity,
                currentOtherTags: JSON.stringify(currentOtherTags)

            };
            $.ajax({
                type: "POST",
                url: "/Article/Save", // 控制器的 URL
                data: articleData,
                success: function (response) {
                    showNotification("保存成功");
                }
            });
            
        }
        $('#saveButton').on('click', save);

        
        $('#deleteButton').on('click', function () {
            var confirmation = confirm("確定要刪除這篇草稿嗎？");
            if (confirmation) {
                $.post("/Article/Delete", { articleId: articleId })
                    .done(function () {
                        alert("刪除成功");
                        window.location = "/Article/Draft/"
                    })
            }
        });

        $('#createButton').on('click', function () {

            $.ajax({
                type: "post",
                url: "/Article/CreateDraft", // 控制器的 URL
                success: function (response) {
                    alert("新增成功");
                    window.location = "/Article/Draft/"
                }
            });
        });

        $('#publishButton').on('click', function () {
            if (publishCheck()) {
                var confirmation = confirm("確定要發佈嗎？");
                if (confirmation) {
                    save();
                    $.post("/Article/PublishDraft", { articleId: articleId })
                        .done(function () {
                            window.location = '/Article/ArticleView?articleId=' + articleId;
                        })
                }
            }
            
        });

        $('#articleImage').on('click', function () {
            $('#articleImageUpload').click();
        });

        $('#articleImageUpload').on('change', function () {
            var file = this.files[0];
            var formData = new FormData();
            formData.append('file', file);
            formData.append('articleId', articleId);
            $.ajax({
                type: "post",
                url: "/Article/UploadArticleImage",
                data: formData,
                processData: false,  // 禁止 jQuery 处理数据
                contentType: false,  // 禁止 jQuery 设置内容类型
                success: function (src) {
                    $('#articleImage').prop('src', src);
                }
            });
        });

        function showNotification(message) {
            $("#notification").text(message).css("display","block")
            setTimeout(function () {
                $("#notification").css("display", "none");
            },1000)
        }
        $('#testButton').on('click', function () {
            let tags = $(".selectedTag")
            let tagList = [];
            tags.each(function (e) { 
                let idString = $(this).prop("id");
                let tagId = idString.substring(idString.lastIndexOf("_") + 1);
                let tagObj = {

                }
                //console.log();
            })
            
        });
        // $(window).on('beforeunload', function () {
        //     return '您确定要离开当前页面吗？'; // 在离开页面时弹出提示
        // });

        // // 当用户点击页面上的其他链接或者刷新页面时，解除beforeunload事件绑定
        // $('a').on('click', function () {
        //     $(window).off('beforeunload');
        // });
    });

    // function selectTag(tag) {
    //     console.log(tag.id);
    //     if (tag.classList.contains("selectedTag")) {
    //         tag.classList.remove("selectedTag"); // 移除未選中的樣式
    //         tag.classList.add("unselectedTag"); // 添加選中的樣式
    //     }
    //     else {
    //         tag.classList.remove("unselectedTag"); // 移除未選中的樣式
    //         tag.classList.add("selectedTag"); // 添加選中的樣式
    //     }

    // }
    function refreshTag(id) {
        $(`#spotTag_${id}`).html("");
        //console.log($(`#spotTagInput_${id}`).val());
        let spotTagInput = $(`#spotTagInput_${id}`).val();
        if (spotTagInput == "") {
            for (let i = 0; i < AllCity[id].length; i++) {
                $(`#spotTag_${id}`).append(
                    `<button class="btn btn-tag" onclick="chooseSpotTag(${AllCity[id][i].SpotId}, '${AllCity[id][i].ScenicSpotName}')">
                        ${AllCity[id][i].ScenicSpotName}
                        </button>`)
                if (i == 4) {
                    break;
                }
            }
        }
        else {
            let index = 0;
            for (let i = 0; i < AllCity[id].length; i++) {
                if (!AllCity[id][i].ScenicSpotName.includes(spotTagInput)) {
                    continue;
                }
                $(`#spotTag_${id}`).append(
                    `<button class="btn btn-tag" onclick="chooseSpotTag(${AllCity[id][i].SpotId}, '${AllCity[id][i].ScenicSpotName}')">
                    ${AllCity[id][i].ScenicSpotName}
                    </button>`)
                index++;
                if (index == 4) {
                    break;
                }
            }
        }
    }
    function chooseSpotTag(SpotId, ScenicSpotName) {
        $('.spotPanel').hide();
        currentSpotTag.SpotId = SpotId;
        currentSpotTag.ScenicSpotName = ScenicSpotName;
        $('#currentSpotTag').text(ScenicSpotName);
        //console.log(currentSpotTag);
    }
    function addSpotTag(obj) {
        let spotInput = $(obj).prev('input').val()
        currentCity = $(obj).closest('.col-auto').find('.cityButton').text()
        chooseSpotTag(0, spotInput)
    }
    function refreshOtherTag(obj) {
        $("#otherTags").html("");

        let otherTagInput = $(obj).val();
        if (otherTagInput == "") {
            for (let i = 0; i < otherTagsData.length; i++) {
                $("#otherTags").append(
                    `<button class="btn btn-tag" onclick="chooseOtherTag(${otherTagsData[i].OtherTagId}, '${otherTagsData[i].OtherTagName}')">
                                ${otherTagsData[i].OtherTagName}
                            </button>`)
                if (i == 4) {
                    break;
                }
            }
        }

        else {
            let index = 0;
            for (let i = 0; i < otherTagsData.length; i++) {
                if (!otherTagsData[i].OtherTagName.includes(otherTagInput)) {
                    continue;
                }
                $("#otherTags").append(
                    `<button class="btn btn-tag" onclick="chooseOtherTag(${otherTagsData[i].OtherTagId}, '${otherTagsData[i].OtherTagName}')">
                                    ${otherTagsData[i].OtherTagName}
                                </button>`)
                index++;
                if (index == 4) {
                    break;
                }
            }
        }
    }
    function chooseOtherTag(OtherTagId, OtherTagName) {
        
        for (let i = 0; i < currentOtherTags.length; i++) {
            if (currentOtherTags[i].OtherTagName == OtherTagName) {
                return;
            }
        }
        if (currentOtherTags.length >= 3) {
            alert("大於三個標籤");
            return;
        }
        let ot = {
            OtherTagId: OtherTagId,
            OtherTagName: OtherTagName
        }
        currentOtherTags.push(ot);
        updateCurrentOtherTags();
        console.log(currentOtherTags);

    }
    function addOtherTag(obj) {
        
        let otherTagInput = $(obj).prev('input')

        if (otherTagInput.val().trim() == "") {
            return;
        }
        for (let i = 0; i < otherTagsData.length; i++) {
            if (otherTagsData[i].OtherTagName == otherTagInput) {
                return;
            }
        }
        chooseOtherTag(0, otherTagInput.val().trim());
        otherTagInput.val("");
    }
    function updateCurrentOtherTags() {
        $('#currentOtherTag').html("");

        for (let i = 0; i < currentOtherTags.length; i++) {
            $('#currentOtherTag').append(
                `<span class="badge custom-badge">${currentOtherTags[i].OtherTagName}
                        <i class="fa-solid fa-circle-xmark fa-lg" onclick="removeOtherTag(this)" style="cursor: pointer;"></i>
                </span>`)
        }
        
    }
    function removeOtherTag(obj) {
        for (let i = 0; i < currentOtherTags.length; i++) {
            if (currentOtherTags[i].OtherTagName == $(obj).parent().contents().filter(function () {
                return this.nodeType === 3;
                }).text().trim()) {
                currentOtherTags.splice(i, 1);
                break;
            }
        }
        $(obj).parent().remove();

    }
    function initLabel() {
        $("#dropdown").on("change", function () {
            let id = $(this).val();

            window.location = '/Article/Draft?articleId=' + id;
        });

        $('.cityButton').on('click', function () {
            // 切换点击的 span 元素相邻的 .spotPanel 元素的显示状态
            $(this).next('.row').find('.spotPanel').toggle();
            // 关闭其他已经打开的 .spotPanel 元素
            $('.spotPanel').not($(this).next('.row').find('.spotPanel')).hide();
        });
        $('.cityButton').each(function () {
            var buttonPosition = $(this).offset().left; // 获取按钮相对于文档左上角的水平位置
   
            // 获取视窗宽度
            var windowWidth = $(window).width();
            var halfWindowWidth = windowWidth / 2;

            // 判断按钮是否在屏幕右半边
            if (buttonPosition > halfWindowWidth) {
                // 找到相邻的 row 元素
                var $row = $(this).next('.row');

                // 在相邻的 row 元素上添加 justify-content-end class
                $row.addClass('justify-content-end');
            }
            // console.log(this)
            // console.log(buttonPosition > halfWindowWidth);
            // console.log($(this).next('.row'));
            // return;
        });
        $('#otherTagButton').on('click', function () {
            $('.otherTagPanel').toggle();
        });
        // // 获取所有具有.panel类的元素
        // const panels = $('.panel');
        // console.log(panels);
     
    }
    function publishCheck() {
        let titleValue = $('#title').val();
        if (titleValue.trim() == "") {
            alert("文章標題不能為空")
            return false;
        }
        if (titleValue.trim().length >50) {
            alert("文章標題過長")
            return false;
        }
        if ($('#subtitle').val().trim().length > 30) {
            alert("文章副標題過長")
            return false;
        }
        if ($('#currentSpotTag').text() == '') {
            alert("旅遊地點不能為空")
            return false;
        }
        
        return true;  
    }
</script>
